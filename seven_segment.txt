module seven_segment(
    input clk,
	 input enter, //enter button
	 input clear,
    input [3:0] switch_test, //switch input
	 input go_back_to_idle, //if 1, send the system back to idle state
	 input change_decide, //if 0 then the user did not press change, if 1 then the bitch did (<-- Who wrote this? --- mauriezh reviewing @07/18/2020)
    output reg [3:0] AN, //SSD
    output [6:0] seven_out, //display
	 output reg idle_or_nah //is the system in idle state
  );
	
	reg [1:0] num_count = 2'b00; //increments according to the enter button
	reg [1:0] clk_count = 2'b11; //increments according to the clock
	reg [4:0] seven_in; //binary that will determine what is outputted to the SSD 
	reg [1:0] dash_count = 2'b00; //increments according to the clock
	reg [15:0] changed_password; //counts the cases for when the password is changed.
	
	initial begin
		AN = 1;
		seven_in = 5'b01111;
		idle_or_nah = 0;
	end
	
	binary_to_segment disp0(seven_in, seven_out); //translate to 7 LED values
	
	always @(posedge clk) begin
		dash_count = dash_count + 1'b1;
			
		if (idle_or_nah == 1) begin //not in idle state and want to display numbers
			if (enter) //every time we press enter, we want to advance which screen display the number
				num_count = num_count + 1'b1;
			
			else if (go_back_to_idle == 1) begin //if the password is wrong, put the system back in idle
				idle_or_nah = 0;
				num_count = 2'b00;
			end
				
			else if (clear) begin //every time we press clear we want to clear display and go back to the first screen
				num_count = 2'b00;
				dash_count = 2'b00;
			end
						
			else begin //if we want to display the numbers
				case (num_count)		
				0: begin
					case (dash_count)
					0: begin
						AN <= 4'b0111;
						seven_in <= {1'b0, switch_test};
						
						if (change_decide)
							changed_password[15:12] <= switch_test;
					end
						
					1: begin
						AN <= 4'b1011;
						seven_in <= 5'd21;
					end
						
					2: begin
						AN <= 4'b1101;
						seven_in <= 5'd21;
						end
						
					3: begin
						AN <= 4'b1110;
						seven_in <= 5'd21;
					end
					endcase						
				end	

				1: begin
					case (dash_count)
					0: begin
						AN <= 4'b0111;
						if (!change_decide)
							seven_in <= 5'd20; //- on screen 1
						else
							seven_in <= {1'b0, changed_password[15:12]};
					end
						
					1: begin
						AN <= 4'b1011;
						seven_in <= {1'b0, switch_test}; //number on screen 2
						if (change_decide)
							changed_password[11:8] <= switch_test;
					end
						
					2: begin
						AN <= 4'b1101;
						seven_in <= 5'd21; //blank screen 3
					end
					
					3: begin
						AN <= 4'b1110;
						seven_in <= 5'd21; //blank screen 4
					end
					endcase
					
				end
					
				2: begin
					case (dash_count)
					0: begin
						AN <= 4'b0111; 
						if (!change_decide)
							seven_in <=5'd20; //- on screen 1
						else
							seven_in <= {1'b0, changed_password[15:12]};
					end
						
					1: begin
						AN <= 4'b1011;
						if (!change_decide)
							seven_in <= 5'd20; //- on screen 2
						else
							seven_in <= {1'b0, changed_password[11:8]};
					end
						
					2: begin
						seven_in <= {1'b0, switch_test}; //number on screen 3
						if (change_decide)
							changed_password[7:4] <= switch_test;
					end
					
					3: begin
						AN <= 4'b1110;
						seven_in <= 5'd21; //blank screen 4
					end
					endcase
				end
					
				3: begin
					case (dash_count)
					0: begin
						AN <= 4'b0111;
						if (change_decide)
							seven_in <= {1'b0, changed_password[15:12]};
						else
							seven_in <= 5'd20; //- on screen 1
					end
						
					1: begin
						AN <= 4'b1011;
						if (!change_decide)
							seven_in <= 5'd20; //- on screen 2
						else
							seven_in <= {1'b0, changed_password[11:8]};
					end
						
					2: begin
						AN <= 4'b1101;
						if (!change_decide)
							seven_in <= 5'd20; //- on screen 3
						else
							seven_in <= {1'b0, changed_password[7:4]};
					end
					
					3: begin
						AN <= 4'b1110;
						seven_in <= {1'b0, switch_test}; //number on screen 4					
						if (change_decide)
							changed_password[3:0] <= switch_test;
					end
					endcase
				end
					
				endcase
			end
		end
		
		else begin //if in idle state
		
			if (enter) begin //if in idle state and enter is pressed
				idle_or_nah = 1;//switch to not idle state
			end
			
			else begin // if in idle state and we want to display CLSd
				clk_count = clk_count + 1'b1;
			
				case (clk_count)
				0: begin
					AN <= 4'b0111;
					seven_in <= 5'd16;
				end
			
				1: begin
					AN <= 4'b1011;
					seven_in <= 5'd17;
				end
			
				2: begin
					AN <= 4'b1101;
					seven_in <= 5'd18;
				end
				
				3: begin
					AN <= 4'b1110;
					seven_in <= 5'd19;
				end
			endcase
		end
	end	
end

endmodule
